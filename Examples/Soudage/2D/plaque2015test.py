# -*- coding: utf-8 -*-

###
### This file is generated automatically by SALOME v7.6.0 with dump python functionality
###

import sys
import salome

salome.salome_init()
theStudy = salome.myStudy

import salome_notebook
notebook = salome_notebook.NoteBook(theStudy)
sys.path.insert( 0, r'/home/bordreuil/Enseignement/elementsFiNimes/Examples/Soudage/2D')

###
### GEOM component
###

import GEOM
from salome.geom import geomBuilder
import math
import SALOMEDS


geompy = geomBuilder.New(theStudy)

O = geompy.MakeVertex(0, 0, 0)
OX = geompy.MakeVectorDXDYDZ(1, 0, 0)
OY = geompy.MakeVectorDXDYDZ(0, 1, 0)
OZ = geompy.MakeVectorDXDYDZ(0, 0, 1)
Sommet_1 = geompy.MakeVertex(0, 0, 0)
Sommet_2 = geompy.MakeVertex(500, 0, 0)
Sommet_3 = geompy.MakeVertex(500, 20, 0)
Sommet_4 = geompy.MakeVertex(500, 100, 0)
Sommet_5 = geompy.MakeVertex(0, 100, 0)
Sommet_6 = geompy.MakeVertex(0, 20, 0)
Ligne_1 = geompy.MakeLineTwoPnt(Sommet_1, Sommet_2)
Ligne_2 = geompy.MakeLineTwoPnt(Sommet_2, Sommet_3)
Ligne_3 = geompy.MakeLineTwoPnt(Sommet_3, Sommet_6)
Ligne_4 = geompy.MakeLineTwoPnt(Sommet_1, Sommet_6)
Ligne_5 = geompy.MakeLineTwoPnt(Sommet_3, Sommet_4)
Ligne_6 = geompy.MakeLineTwoPnt(Sommet_4, Sommet_5)
Ligne_7 = geompy.MakeLineTwoPnt(Sommet_5, Sommet_6)
Face_1 = geompy.MakeFaceWires([Ligne_1, Ligne_2, Ligne_3, Ligne_4], 1)
Face_2 = geompy.MakeFaceWires([Ligne_3, Ligne_5, Ligne_6, Ligne_7], 1)
Plaque = geompy.MakeCompound([Face_1, Face_2])
geomObj_1 = geompy.CreateGroup(Plaque, geompy.ShapeType["EDGE"])
geompy.UnionIDs(geomObj_1, [4])
gauche = geompy.CreateGroup(Plaque, geompy.ShapeType["EDGE"])
geompy.UnionIDs(gauche, [7])
droite = geompy.CreateGroup(Plaque, geompy.ShapeType["EDGE"])
geompy.UnionIDs(droite, [11])
Fin = geompy.CreateGroup(Plaque, geompy.ShapeType["FACE"])
geompy.UnionIDs(Fin, [2])
centre = geompy.CreateGroup(Plaque, geompy.ShapeType["EDGE"])
geompy.UnionIDs(centre, [4, 9])
ext = geompy.CreateGroup(Plaque, geompy.ShapeType["EDGE"])
geompy.UnionIDs(ext, [19])
Ext = geompy.CreateGroup(Plaque, geompy.ShapeType["FACE"])
geompy.UnionIDs(Ext, [12])
comm = geompy.CreateGroup(Plaque, geompy.ShapeType["EDGE"])
geompy.UnionIDs(comm, [14])
geompy.addToStudy( O, 'O' )
geompy.addToStudy( OX, 'OX' )
geompy.addToStudy( OY, 'OY' )
geompy.addToStudy( OZ, 'OZ' )
geompy.addToStudy( Sommet_1, 'Sommet_1' )
geompy.addToStudy( Sommet_2, 'Sommet_2' )
geompy.addToStudy( Sommet_3, 'Sommet_3' )
geompy.addToStudy( Sommet_4, 'Sommet_4' )
geompy.addToStudy( Sommet_5, 'Sommet_5' )
geompy.addToStudy( Sommet_6, 'Sommet_6' )
geompy.addToStudy( Ligne_1, 'Ligne_1' )
geompy.addToStudy( Ligne_2, 'Ligne_2' )
geompy.addToStudy( Ligne_3, 'Ligne_3' )
geompy.addToStudy( Ligne_4, 'Ligne_4' )
geompy.addToStudy( Ligne_5, 'Ligne_5' )
geompy.addToStudy( Ligne_6, 'Ligne_6' )
geompy.addToStudy( Ligne_7, 'Ligne_7' )
geompy.addToStudy( Face_1, 'Face_1' )
geompy.addToStudy( Face_2, 'Face_2' )
geompy.addToStudy( Plaque, 'Plaque' )
geompy.addToStudyInFather( Plaque, gauche, 'gauche' )
geompy.addToStudyInFather( Plaque, droite, 'droite' )
geompy.addToStudyInFather( Plaque, Fin, 'Fin' )
geompy.addToStudyInFather( Plaque, centre, 'centre' )
geompy.addToStudyInFather( Plaque, ext, 'ext' )
geompy.addToStudyInFather( Plaque, Ext, 'Ext' )
geompy.addToStudyInFather( Plaque, comm, 'comm' )

###
### SMESH component
###

import  SMESH, SALOMEDS
from salome.smesh import smeshBuilder

smesh = smeshBuilder.New(theStudy)
NETGEN_2D = smesh.CreateHypothesis('NETGEN_2D', 'libNETGENEngine.so')
NETGEN_2D_Parameters = smesh.CreateHypothesis('NETGEN_Parameters_2D', 'libNETGENEngine.so')
NETGEN_2D_Parameters.SetMaxSize( 50 )
NETGEN_2D_Parameters.SetSecondOrder( 0 )
NETGEN_2D_Parameters.SetOptimize( 1 )
NETGEN_2D_Parameters.SetFineness( 2 )
NETGEN_2D_Parameters.SetMinSize( 1 )
NETGEN_2D_Parameters.SetQuadAllowed( 0 )
Regular_1D = smesh.CreateHypothesis('Regular_1D')
Nb_Segments_1 = smesh.CreateHypothesis('NumberOfSegments')
Arithmetic_1D_1 = smesh.CreateHypothesis('Arithmetic1D')
Arithmetic_1D_2 = smesh.CreateHypothesis('Arithmetic1D')
Nb_Segments_2 = smesh.CreateHypothesis('NumberOfSegments')
Quadrangle_2D = smesh.CreateHypothesis('Quadrangle_2D')
Quadrangle_Parameters_1 = smesh.CreateHypothesis('QuadrangleParams')
Quadrangle_Parameters_1.SetEnforcedNodes( [], [] )
Arithmetic_1D_2.SetStartLength( 1 )
Arithmetic_1D_2.SetEndLength( 1 )
Arithmetic_1D_2.SetReversedEdges( [] )
Arithmetic_1D_2.SetObjectEntry( "0:1:1:24" )
Arithmetic_1D_1.SetStartLength( 1 )
Arithmetic_1D_1.SetEndLength( 1 )
Arithmetic_1D_1.SetReversedEdges( [] )
Arithmetic_1D_1.SetObjectEntry( "0:1:1:24" )
Nb_Segments_1.SetNumberOfSegments( 250 )
Nb_Segments_1.SetDistrType( 0 )
Nb_Segments_2.SetNumberOfSegments( 20 )
Nb_Segments_2.SetDistrType( 0 )
NETGEN_2D_Parameters_1 = smesh.CreateHypothesis('NETGEN_Parameters_2D', 'NETGENEngine')
NETGEN_2D_Parameters_1.SetMaxSize( 10 )
NETGEN_2D_Parameters_1.SetSecondOrder( 0 )
NETGEN_2D_Parameters_1.SetOptimize( 1 )
NETGEN_2D_Parameters_1.SetFineness( 2 )
NETGEN_2D_Parameters_1.SetMinSize( 1 )
NETGEN_2D_Parameters_1.SetUseSurfaceCurvature( 1 )
NETGEN_2D_Parameters_1.SetFuseEdges( 1 )
NETGEN_2D_Parameters_1.SetQuadAllowed( 0 )
NETGEN_2D_Parameters_2 = smesh.CreateHypothesis('NETGEN_Parameters_2D', 'NETGENEngine')
NETGEN_2D_Parameters_2.SetMaxSize( 10 )
NETGEN_2D_Parameters_2.SetSecondOrder( 0 )
NETGEN_2D_Parameters_2.SetOptimize( 1 )
NETGEN_2D_Parameters_2.SetFineness( 2 )
NETGEN_2D_Parameters_2.SetMinSize( 1 )
NETGEN_2D_Parameters_2.SetUseSurfaceCurvature( 1 )
NETGEN_2D_Parameters_2.SetFuseEdges( 1 )
NETGEN_2D_Parameters_2.SetQuadAllowed( 0 )
Maillage_1 = smesh.Mesh(Plaque)
status = Maillage_1.AddHypothesis(NETGEN_2D_Parameters_2)
status = Maillage_1.AddHypothesis(NETGEN_2D)
NETGEN_2D_Parameters_3 = smesh.CreateHypothesis('NETGEN_Parameters_2D', 'NETGENEngine')
NETGEN_2D_Parameters_3.SetSecondOrder( 0 )
NETGEN_2D_Parameters_3.SetOptimize( 1 )
NETGEN_2D_Parameters_3.SetFineness( 2 )
NETGEN_2D_Parameters_3.SetMinSize( 1 )
NETGEN_2D_Parameters_3.SetUseSurfaceCurvature( 1 )
NETGEN_2D_Parameters_3.SetFuseEdges( 1 )
NETGEN_2D_Parameters_3.SetQuadAllowed( 0 )
Sous_maillage_1 = Maillage_1.GetSubMesh( Fin, 'Sous-maillage_1' )
status = Maillage_1.AddHypothesis(NETGEN_2D,Fin)
status = Maillage_1.AddHypothesis(NETGEN_2D_Parameters_3,Fin)
[ Sous_maillage_1 ] = Maillage_1.GetMesh().GetSubMeshes()
Local_Length_1 = smesh.CreateHypothesis('LocalLength')
Local_Length_1.SetLength( 1 )
Local_Length_1.SetPrecision( 1e-07 )
smeshObj_1 = Maillage_1.GetSubMesh( centre, 'Sous-maillage_2' )
status = Maillage_1.AddHypothesis(Regular_1D,centre)
status = Maillage_1.AddHypothesis(Local_Length_1,centre)
isDone = Maillage_1.SetMeshOrder( [ [ smeshObj_1, Sous_maillage_1 ] ])
[ Sous_maillage_1, smeshObj_1 ] = Maillage_1.GetMesh().GetSubMeshes()
status = Maillage_1.RemoveHypothesis(Regular_1D,centre)
status = Maillage_1.RemoveHypothesis(Local_Length_1,centre)
Maillage_1.GetMesh().RemoveSubMesh( smeshObj_1 )
Local_Length_2 = smesh.CreateHypothesis('LocalLength')
Local_Length_2.SetLength( 1 )
Local_Length_2.SetPrecision( 1e-07 )
status = Maillage_1.AddHypothesis(Regular_1D,comm)
status = Maillage_1.AddHypothesis(Local_Length_2,comm)
[ Sous_maillage_1, Sous_maillage_2 ] = Maillage_1.GetMesh().GetSubMeshes()
NETGEN_2D_Parameters_3.SetMaxSize( 1 )
isDone = Maillage_1.Compute()
[ Sous_maillage_1, Sous_maillage_2 ] = Maillage_1.GetMesh().GetSubMeshes()
coincident_nodes_on_part = Maillage_1.FindCoincidentNodesOnPart( Maillage_1, 1e-05, [] )
Maillage_1.MergeNodes([[ 2840, 3 ], [ 2839, 4 ], [ 3361, 5 ], [ 3362, 6 ], [ 3363, 7 ], [ 3364, 8 ], [ 3365, 9 ], [ 3366, 10 ], [ 3367, 11 ], [ 3368, 12 ], [ 3369, 13 ], [ 3370, 14 ], [ 3371, 15 ], [ 3372, 16 ], [ 3373, 17 ], [ 3374, 18 ], [ 3375, 19 ], [ 3376, 20 ], [ 3377, 21 ], [ 3378, 22 ], [ 3379, 23 ], [ 3380, 24 ], [ 3381, 25 ], [ 3382, 26 ], [ 3383, 27 ], [ 3384, 28 ], [ 3385, 29 ], [ 3386, 30 ], [ 3387, 31 ], [ 3388, 32 ], [ 3389, 33 ], [ 3390, 34 ], [ 3391, 84 ], [ 3392, 85 ], [ 3393, 86 ], [ 3394, 87 ], [ 3395, 88 ], [ 3396, 89 ], [ 3397, 90 ], [ 3398, 91 ], [ 3399, 92 ], [ 3400, 93 ], [ 3401, 94 ], [ 3402, 95 ], [ 3403, 96 ], [ 3404, 97 ], [ 3405, 98 ], [ 3406, 99 ], [ 3407, 100 ], [ 3408, 101 ], [ 3409, 102 ], [ 3410, 103 ], [ 3411, 104 ], [ 3412, 105 ], [ 3413, 106 ], [ 3414, 107 ], [ 3415, 108 ], [ 3416, 109 ], [ 3417, 110 ], [ 3418, 111 ], [ 3419, 112 ], [ 3420, 113 ], [ 3421, 114 ], [ 3422, 115 ], [ 3423, 116 ], [ 3424, 117 ], [ 3425, 118 ], [ 3426, 119 ], [ 3427, 120 ], [ 3428, 121 ], [ 3429, 122 ], [ 3430, 123 ], [ 3431, 124 ], [ 3432, 125 ], [ 3433, 126 ], [ 3434, 127 ], [ 3435, 128 ], [ 3436, 129 ], [ 3437, 130 ], [ 3438, 131 ], [ 3439, 132 ], [ 3440, 133 ], [ 3441, 134 ], [ 3442, 135 ], [ 3443, 136 ], [ 3444, 137 ], [ 3445, 138 ], [ 3446, 139 ], [ 3447, 140 ], [ 3448, 141 ], [ 3449, 142 ], [ 3450, 143 ], [ 3451, 144 ], [ 3452, 145 ], [ 3453, 146 ], [ 3454, 147 ], [ 3455, 148 ], [ 3456, 149 ], [ 3457, 150 ], [ 3458, 151 ], [ 3459, 152 ], [ 3460, 153 ], [ 3461, 154 ], [ 3462, 155 ], [ 3463, 156 ], [ 3464, 157 ], [ 3465, 158 ], [ 3466, 159 ], [ 3467, 160 ], [ 3468, 161 ], [ 3469, 162 ], [ 3470, 163 ], [ 3471, 164 ], [ 3472, 165 ], [ 3473, 166 ], [ 3474, 167 ], [ 3475, 168 ], [ 3476, 169 ], [ 3477, 170 ], [ 3478, 171 ], [ 3479, 172 ], [ 3480, 173 ], [ 3481, 174 ], [ 3482, 175 ], [ 3483, 176 ], [ 3484, 177 ], [ 3485, 178 ], [ 3486, 179 ], [ 3487, 180 ], [ 3488, 181 ], [ 3489, 182 ], [ 3490, 183 ], [ 3491, 184 ], [ 3492, 185 ], [ 3493, 186 ], [ 3494, 187 ], [ 3495, 188 ], [ 3496, 189 ], [ 3497, 190 ], [ 3498, 191 ], [ 3499, 192 ], [ 3500, 193 ], [ 3501, 194 ], [ 3502, 195 ], [ 3503, 196 ], [ 3504, 197 ], [ 3505, 198 ], [ 3506, 199 ], [ 3507, 200 ], [ 3508, 201 ], [ 3509, 202 ], [ 3510, 203 ], [ 3511, 204 ], [ 3512, 205 ], [ 3513, 206 ], [ 3514, 207 ], [ 3515, 208 ], [ 3516, 209 ], [ 3517, 210 ], [ 3518, 211 ], [ 3519, 212 ], [ 3520, 213 ], [ 3521, 214 ], [ 3522, 215 ], [ 3523, 216 ], [ 3524, 217 ], [ 3525, 218 ], [ 3526, 219 ], [ 3527, 220 ], [ 3528, 221 ], [ 3529, 222 ], [ 3530, 223 ], [ 3531, 224 ], [ 3532, 225 ], [ 3533, 226 ], [ 3534, 227 ], [ 3535, 228 ], [ 3536, 229 ], [ 3537, 230 ], [ 3538, 231 ], [ 3539, 232 ], [ 3540, 233 ], [ 3541, 234 ], [ 3542, 235 ], [ 3543, 236 ], [ 3544, 237 ], [ 3545, 238 ], [ 3546, 239 ], [ 3547, 240 ], [ 3548, 241 ], [ 3549, 242 ], [ 3550, 243 ], [ 3551, 244 ], [ 3552, 245 ], [ 3553, 246 ], [ 3554, 247 ], [ 3555, 248 ], [ 3556, 249 ], [ 3557, 250 ], [ 3558, 251 ], [ 3559, 252 ], [ 3560, 253 ], [ 3561, 254 ], [ 3562, 255 ], [ 3563, 256 ], [ 3564, 257 ], [ 3565, 258 ], [ 3566, 259 ], [ 3567, 260 ], [ 3568, 261 ], [ 3569, 262 ], [ 3570, 263 ], [ 3571, 264 ], [ 3572, 265 ], [ 3573, 266 ], [ 3574, 267 ], [ 3575, 268 ], [ 3576, 269 ], [ 3577, 270 ], [ 3578, 271 ], [ 3579, 272 ], [ 3580, 273 ], [ 3581, 274 ], [ 3582, 275 ], [ 3583, 276 ], [ 3584, 277 ], [ 3585, 278 ], [ 3586, 279 ], [ 3587, 280 ], [ 3588, 281 ], [ 3589, 282 ], [ 3590, 283 ], [ 3591, 284 ], [ 3592, 285 ], [ 3593, 286 ], [ 3594, 287 ], [ 3595, 288 ], [ 3596, 289 ], [ 3597, 290 ], [ 3598, 291 ], [ 3599, 292 ], [ 3600, 293 ], [ 3601, 294 ], [ 3602, 295 ], [ 3603, 296 ], [ 3604, 297 ], [ 3605, 298 ], [ 3606, 299 ], [ 3607, 300 ], [ 3608, 301 ], [ 3609, 302 ], [ 3610, 303 ], [ 3611, 304 ], [ 3612, 305 ], [ 3613, 306 ], [ 3614, 307 ], [ 3615, 308 ], [ 3616, 309 ], [ 3617, 310 ], [ 3618, 311 ], [ 3619, 312 ], [ 3620, 313 ], [ 3621, 314 ], [ 3622, 315 ], [ 3623, 316 ], [ 3624, 317 ], [ 3625, 318 ], [ 3626, 319 ], [ 3627, 320 ], [ 3628, 321 ], [ 3629, 322 ], [ 3630, 323 ], [ 3631, 324 ], [ 3632, 325 ], [ 3633, 326 ], [ 3634, 327 ], [ 3635, 328 ], [ 3636, 329 ], [ 3637, 330 ], [ 3638, 331 ], [ 3639, 332 ], [ 3640, 333 ], [ 3641, 334 ], [ 3642, 335 ], [ 3643, 336 ], [ 3644, 337 ], [ 3645, 338 ], [ 3646, 339 ], [ 3647, 340 ], [ 3648, 341 ], [ 3649, 342 ], [ 3650, 343 ], [ 3651, 344 ], [ 3652, 345 ], [ 3653, 346 ], [ 3654, 347 ], [ 3655, 348 ], [ 3656, 349 ], [ 3657, 350 ], [ 3658, 351 ], [ 3659, 352 ], [ 3660, 353 ], [ 3661, 354 ], [ 3662, 355 ], [ 3663, 356 ], [ 3664, 357 ], [ 3665, 358 ], [ 3666, 359 ], [ 3667, 360 ], [ 3668, 361 ], [ 3669, 362 ], [ 3670, 363 ], [ 3671, 364 ], [ 3672, 365 ], [ 3673, 366 ], [ 3674, 367 ], [ 3675, 368 ], [ 3676, 369 ], [ 3677, 370 ], [ 3678, 371 ], [ 3679, 372 ], [ 3680, 373 ], [ 3681, 374 ], [ 3682, 375 ], [ 3683, 376 ], [ 3684, 377 ], [ 3685, 378 ], [ 3686, 379 ], [ 3687, 380 ], [ 3688, 381 ], [ 3689, 382 ], [ 3690, 383 ], [ 3691, 384 ], [ 3692, 385 ], [ 3693, 386 ], [ 3694, 387 ], [ 3695, 388 ], [ 3696, 389 ], [ 3697, 390 ], [ 3698, 391 ], [ 3699, 392 ], [ 3700, 393 ], [ 3701, 394 ], [ 3702, 395 ], [ 3703, 396 ], [ 3704, 397 ], [ 3705, 398 ], [ 3706, 399 ], [ 3707, 400 ], [ 3708, 401 ], [ 3709, 402 ], [ 3710, 403 ], [ 3711, 404 ], [ 3712, 405 ], [ 3713, 406 ], [ 3714, 407 ], [ 3715, 408 ], [ 3716, 409 ], [ 3717, 410 ], [ 3718, 411 ], [ 3719, 412 ], [ 3720, 413 ], [ 3721, 414 ], [ 3722, 415 ], [ 3723, 416 ], [ 3724, 417 ], [ 3725, 418 ], [ 3726, 419 ], [ 3727, 420 ], [ 3728, 421 ], [ 3729, 422 ], [ 3730, 423 ], [ 3731, 424 ], [ 3732, 425 ], [ 3733, 426 ], [ 3734, 427 ], [ 3735, 428 ], [ 3736, 429 ], [ 3737, 430 ], [ 3738, 431 ], [ 3739, 432 ], [ 3740, 433 ], [ 3741, 434 ], [ 3742, 435 ], [ 3743, 436 ], [ 3744, 437 ], [ 3745, 438 ], [ 3746, 439 ], [ 3747, 440 ], [ 3748, 441 ], [ 3749, 442 ], [ 3750, 443 ], [ 3751, 444 ], [ 3752, 445 ], [ 3753, 446 ], [ 3754, 447 ], [ 3755, 448 ], [ 3756, 449 ], [ 3757, 450 ], [ 3758, 451 ], [ 3759, 452 ], [ 3760, 453 ], [ 3761, 454 ], [ 3762, 455 ], [ 3763, 456 ], [ 3764, 457 ], [ 3765, 458 ], [ 3766, 459 ], [ 3767, 460 ], [ 3768, 461 ], [ 3769, 462 ], [ 3770, 463 ], [ 3771, 464 ], [ 3772, 465 ], [ 3773, 466 ], [ 3774, 467 ], [ 3775, 468 ], [ 3776, 469 ], [ 3777, 470 ], [ 3778, 471 ], [ 3779, 472 ], [ 3780, 473 ], [ 3781, 474 ], [ 3782, 475 ], [ 3783, 476 ], [ 3784, 477 ], [ 3785, 478 ], [ 3786, 479 ], [ 3787, 480 ], [ 3788, 481 ], [ 3789, 482 ], [ 3790, 483 ], [ 3791, 484 ], [ 3792, 485 ], [ 3793, 486 ], [ 3794, 487 ], [ 3795, 488 ], [ 489, 3796 ], [ 490, 3797 ], [ 491, 3798 ], [ 492, 3799 ], [ 493, 3800 ], [ 494, 3801 ], [ 495, 3802 ], [ 496, 3803 ], [ 497, 3804 ], [ 498, 3805 ], [ 499, 3806 ], [ 500, 3807 ], [ 501, 3808 ], [ 502, 3809 ], [ 503, 3810 ], [ 504, 3811 ], [ 505, 3812 ], [ 506, 3813 ], [ 507, 3814 ], [ 508, 3815 ], [ 509, 3816 ], [ 510, 3817 ], [ 511, 3818 ], [ 512, 3819 ], [ 513, 3820 ], [ 514, 3821 ], [ 515, 3822 ], [ 516, 3823 ], [ 517, 3824 ], [ 518, 3825 ], [ 519, 3826 ], [ 520, 3827 ], [ 521, 3828 ], [ 522, 3829 ], [ 523, 3830 ], [ 524, 3831 ], [ 525, 3832 ], [ 526, 3833 ], [ 527, 3834 ], [ 528, 3835 ], [ 529, 3836 ], [ 530, 3837 ], [ 531, 3838 ], [ 532, 3839 ], [ 533, 3840 ], [ 534, 3841 ], [ 535, 3842 ], [ 536, 3843 ], [ 537, 3844 ], [ 538, 3845 ], [ 539, 3846 ], [ 540, 3847 ], [ 541, 3848 ], [ 542, 3849 ], [ 543, 3850 ], [ 544, 3851 ], [ 545, 3852 ], [ 546, 3853 ], [ 547, 3854 ], [ 548, 3855 ], [ 549, 3856 ], [ 550, 3857 ], [ 551, 3858 ], [ 552, 3859 ]])
Sous_maillage_2 = Maillage_1.GetSubMesh( comm, 'Sous-maillage_2' )

## some objects were removed
aStudyBuilder = theStudy.NewBuilder()
SO = theStudy.FindObjectIOR(theStudy.ConvertObjectToIOR(smeshObj_1))
if SO: aStudyBuilder.RemoveObjectWithChildren(SO)

## Set names of Mesh objects
smesh.SetName(NETGEN_2D, 'NETGEN_2D')
smesh.SetName(Quadrangle_2D, 'Quadrangle_2D')
smesh.SetName(Regular_1D, 'Regular_1D')
smesh.SetName(Nb_Segments_1, 'Nb. Segments_1')
smesh.SetName(Arithmetic_1D_1, 'Arithmetic 1D_1')
smesh.SetName(NETGEN_2D_Parameters, 'NETGEN 2D Parameters')
smesh.SetName(Quadrangle_Parameters_1, 'Quadrangle Parameters_1')
smesh.SetName(NETGEN_2D_Parameters_1, 'NETGEN 2D Parameters')
smesh.SetName(Arithmetic_1D_2, 'Arithmetic 1D_2')
smesh.SetName(Nb_Segments_2, 'Nb. Segments_2')
smesh.SetName(NETGEN_2D_Parameters_2, 'NETGEN 2D Parameters')
smesh.SetName(NETGEN_2D_Parameters_3, 'NETGEN 2D Parameters')
smesh.SetName(Sous_maillage_1, 'Sous-maillage_1')
smesh.SetName(Maillage_1.GetMesh(), 'Maillage_1')
smesh.SetName(Sous_maillage_2, 'Sous-maillage_2')
smesh.SetName(Local_Length_2, 'Local Length_2')
smesh.SetName(Local_Length_1, 'Local Length_1')


if salome.sg.hasDesktop():
  salome.sg.updateObjBrowser(1)
