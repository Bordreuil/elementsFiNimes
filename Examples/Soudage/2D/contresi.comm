# 
#
#	Simulation numerique soudage multipasses
#	Determination des contraintes residuelles
#
#	modelisation mecanique simplifiee de la passe
#	procede 141
#	passe 1
#	
#
#
#
#------------------------------------------------------------------
#                       CALCUL ASTER
#-------------------------------------------------------------------
# Pour poursuivre un calcul, il faut lui le dossier .base du resultat
# que l'on veut poursuivre. cf figure astk_poursuite.png
vit       = 100./60.
tmaintien = 3.
tsoudage  = 460./vit+tmaintien # temps de soudage
tfin      = 600.               # temps de fin de l analyse
incrS     = int(tsoudage)      # Nombre d increment pour le calcul
	    		       # pour le soudage


DEBUT();

# Lecture du maillage

MA=LIRE_MAILLAGE(UNITE=20,FORMAT='MED');

L_INST=DEFI_LIST_REEL(DEBUT=3.0,
                      INTERVALLE=(_F(JUSQU_A=tsoudage,
                                    NOMBRE=1*(incrS-3),),
				  _F(JUSQU_A=tfin,
                                    NOMBRE=40,),),);

L_INSTS=DEFI_LIST_REEL(DEBUT=3.0,
                      INTERVALLE=(_F(JUSQU_A=tsoudage,
                                    NOMBRE=int(0.25*(incrS-3)),),
				  _F(JUSQU_A=tfin,
                                    NOMBRE=40,),),);


# Definition des instants de calcul pour une analyse non lineraire

MECA=AFFE_MODELE(MAILLAGE=MA,
                   #VERIF='MAILLE',
                   AFFE=_F(TOUT='OUI',
                           PHENOMENE='MECANIQUE',
                           MODELISATION='C_PLAN',),);

# Projection des champs du modele MODELE provenant de therm_p1.comm
# sur le modele de mecanique MECA
# Dans l affectation du modele le maillage est defini, il est donc envisageable
# d'avoir deux maillages et de projeter un resultat sur l'autre maillage.
TEMPCHA=LIRE_RESU(FORMAT='MED',
		MAILLAGE=MA,
		UNITE=81,
		#PRECISION=1E-10,
		TYPE_RESU='EVOL_THER',
		TOUT_ORDRE='OUI',
		FORMAT_MED=(_F(NOM_CHAM='TEMP',
			       NOM_CHAM_MED='TEMP____TEMP',),),);

MODELE=AFFE_MODELE(MAILLAGE=MA,
                   AFFE=_F(TOUT='OUI',
                           PHENOMENE='THERMIQUE',
                           MODELISATION='AXIS',),);

PROJ_TH=PROJ_CHAMP(RESULTAT=TEMPCHA,
                   MODELE_1=MODELE,
                   MODELE_2=MECA,
                   VIS_A_VIS=_F(TOUT_1='OUI',
                                TOUT_2='OUI',),);
#                                CAS_FIGURE='3D',),);



CTRA=DEFI_FONCTION(
                    NOM_PARA='EPSI',
                    VALE=(0.00191333,287.,
                          1.,787.,
                          ),
                    PROL_DROITE='CONSTANT',);

# Definition des courbes de traction pour une température donnée


# Dependance du module d Young en fonction de la temperature


# DILAT=DEFI_FONCTION(     NOM_PARA='TEMP',
#                             PROL_DROITE='CONSTANT',
#       			    PROL_GAUCHE='CONSTANT',
#                                   VALE=(  20.,  15.9e-6,
#                                          100.,  16.4e-6,
# 					 200., 17e-6,
# 					 300., 17.5e-6,
# 					 400., 17.9e-6,
# 					 500., 18.3e-6,
# 					 600., 18.7e-6,
# 					 700., 19e-6,
# 					 800., 19.4e-6,
# 					 900., 19.6e-6,
# 					 1000., 19.8e-6,
# 					 1100., 19.8e-6,
# 					 1200., 19.8e-6 )
#                          )
DILAT=DEFI_CONSTANTE( VALE=4.e-6)

POISSON = DEFI_CONSTANTE( VALE=0.3)
YOUNG = DEFI_CONSTANTE( VALE=150000.)
# YOUNG=DEFI_FONCTION(     NOM_PARA='TEMP',
#                             PROL_DROITE='CONSTANT',
#       			    PROL_GAUCHE='CONSTANT',
#                                   VALE=(  20., 197000.,
#                                          100., 191500.,
# 					 200., 184000.,
# 					 300., 176500.,
# 					 400., 168000.,
# 					 500., 160000.,
# 					 600., 151500.,
# 					 700., 142500.,
# 					 800., 130000.,
# 					 900., 108000.,
# 					 1000., 81500.,
# 					 1100., 32000.,
# 					 1200., 7400. )
#                          )


# # Affectation des proprietes materiau 
# L elasticite est une fonction de la temperature mot cle ELAS_FO
#   on rentre ensuite les fonctions definies precedemment

INOXM=DEFI_MATERIAU(ELAS_FO=_F(E=YOUNG,
                          NU=POISSON,
                          ALPHA=DILAT,
			  TEMP_DEF_ALPHA=20.),
                  TRACTION=_F(SIGM=CTRA,),);


# Affectation des proprietes materiaux
# a tout le maillage
# Le champ de temperature est une variable qu il faut 
# affecter au niveau de l affectation du materiau
CME=AFFE_MATERIAU(MAILLAGE=MA,
                    AFFE=(_F(TOUT='OUI',
                           MATER=INOXM,),),
               	    AFFE_VARC=(_F(TOUT='OUI',
				NOM_VARC='TEMP',
                                 EVOL=PROJ_TH,
                                 VALE_REF=20.,),),);

# Definition du chargement mecanique
CHARM=AFFE_CHAR_MECA(MODELE=MECA,
                     DDL_IMPO=(_F(GROUP_NO='ext',
                                  DX=0.,
                                  DY=0.,),),);


# Resolution statique non lineaire
# Pour la resolution du probleme non lineaire,
# on resoud le problemen en considerant un probleme
# plastique avec ecrouissage isotrope donne par la courbe de traction : 
# VMIS_ISOT_TRAC 
#
# Pour la resolution non lineaire, on resoud la methode de Newton
# en calculant la matrice tangente a chaque iteration
# INCREMENT est le mot cle pour controle les instants de calcul
# si, le pas de temps entre deux increments est trop long, on peut 
# avoir non convergence du calcul
DU=STAT_NON_LINE(MODELE=MECA,
                 CHAM_MATER=CME,
                 EXCIT=_F(CHARGE=CHARM,),
                 COMPORTEMENT=_F(RELATION='VMIS_ISOT_TRAC',
				ITER_INTE_MAXI=50,
				ITER_INTE_PAS=10,
				PARM_THETA=0.5),
                 #COMP_INCR=_F(RELATION='VMIS_ISOT_TRAC',),
		 NEWTON=_F(REAC_INCR=1,
                               MATRICE='TANGENTE',
                               REAC_ITER=1,
                               REAC_ITER_ELAS=50),
 	         CONVERGENCE=_F(ITER_GLOB_MAXI=200,RESI_GLOB_MAXI=100.),
                 INCREMENT=_F(LIST_INST=L_INST,),
		 ARCHIVAGE=_F(LIST_INST=L_INSTS,),);



# Extraction des resulats:
# 	     - SIGM : Tenseur des contraintes
#	       	    determine a partir des deplacements
#	     - SIEQ : Contraintes equivalentes
DU=CALC_CHAMP(CRITERES=('SIEQ_ELNO',),
                CONTRAINTE=('SIEF_ELNO',),
		DEFORMATION=('EPSP_ELNO'),
                reuse=DU,
               RESULTAT=DU,);

# Moyennation au niveau des noeuds pour la visualisation
DU=CALC_CHAMP(CRITERES=( 'SIEQ_NOEU',),
                CONTRAINTE=('SIEF_NOEU',),
		DEFORMATION=('EPSP_NOEU'),
                reuse=DU,
               RESULTAT=DU,);

# Impression des resultats. GROUP_MA permet d'imprimer les resultats uniquement 
# dans les groupes inox

IMPR_RESU(FORMAT='MED',
          UNITE=80,
          RESU=_F(MAILLAGE=MA,
                  RESULTAT=DU,
                  NOM_CHAM=('SIEF_NOEU','SIEQ_NOEU','DEPL','EPSP_NOEU'),
                  TOUT='OUI',),);

FIN(INFO_RESU='OUI',RETASSAGE='OUI',);
#CHECKSUM:0869e7cc000957d504e49f562041e2fc  -:FIN CHECKSUM
